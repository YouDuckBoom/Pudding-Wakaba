<shaders>
  <shader name="wakaba_ChallengeDest_DummyShader">
    <vertex><![CDATA[
      attribute vec3 Position;
      attribute vec4 Color;
      attribute vec2 TexCoord;
      attribute vec2 PlayerPos;
      varying vec4 Color0;
      varying vec2 TexCoord0;
      varying vec4 RenderDataOut;
      varying float ScaleOut;
      uniform mat4 Transform;
      void main(void)
      {
        Color0 = Color;
        TexCoord0 = TexCoord;
        gl_Position = Transform * vec4(Position.xyz, 1.0);
      }
    ]]></vertex>
    <fragment><![CDATA[
      varying lowp vec4 Color0;
      varying mediump vec2 TexCoord0;
      uniform sampler2D Texture0;
      void main(void)
      {
        vec4 Color = Color0 * texture2D(Texture0, TexCoord0);       
        gl_FragColor = Color;
      }
    ]]></fragment>
  </shader>

  <!-- https://www.shadertoy.com/view/ltycRm -->
  <shader name="wakaba_RabbeyWardArea">
    <parameters>
      <param name="Strength" type="float"/>
      <param name="Type" type="float"/>
      <param name="Time" type="float"/>
    </parameters>
    <vertex><![CDATA[
      attribute vec3 Position;
      attribute vec4 Color;
      attribute vec2 TexCoord;
      attribute vec4 RenderData;
      attribute float Scale;
      attribute float Strength;
      attribute float Type;
      attribute float Time;
      varying vec4 Color0;
      varying vec2 TexCoord0;
      varying vec4 RenderDataOut;
      varying float ScaleOut;
      varying float StrengthOut;
      varying float TypeOut;
      varying float TimeOut;
      uniform mat4 Transform;
      void main(void)
      {
        RenderDataOut = RenderData;
        ScaleOut = Scale;           // Passing data to fragment shader
        StrengthOut = Strength;           // Passing data to fragment shader
        TypeOut = Type;           // Passing data to fragment shader
        TimeOut = Time;           // Passing data to fragment shader
        Color0 = Color;
        TexCoord0 = TexCoord;
        //Position0 = Position;
        gl_Position = Transform * vec4(Position.xyz, 1.0);
      }

    ]]></vertex>
    <fragment><![CDATA[
      varying lowp vec4 Color0;
      varying mediump vec2 TexCoord0;
      varying lowp vec4 RenderDataOut;
      varying lowp float ScaleOut;
      varying lowp float StrengthOut;
      varying lowp float TimeOut;
      varying lowp float TypeOut;
      uniform sampler2D Texture0;
      // colors
      vec3 col_water = vec3(1., .3, .8);
      float t = 10.;

      // marching
      float maxdist = 5.;
      float det = .001;

      // USEFUL LITTLE FUNCTIONS

      // 2D rotation
      mat2 rot2D(float a) {
        a = radians(a);
        float s = sin(a);
        float c = cos(a);
        return mat2(c, s, -s, c);
      }

      // Align vector
      mat3 lookat(vec3 fw, vec3 up) {
        fw = normalize(fw);
        vec3 rt = normalize(cross(fw, normalize(up)));
        return mat3(rt, cross(rt, fw), fw);
      }


      // Tile fold
      float fmod(float p, float c) { return abs(c - mod(p, c * 2.)) / c; }

      // Smooth min
      float smin(float a, float b, float k) {
        float h = clamp(0.5 + 0.5 * (b - a) / k, 0.0, 1.0);
        return mix(b, a, h) - k * h * (1.0 - h);
      }

      // Smooth max
      float smax(float a, float b, float k) {
        float h = clamp(0.5 + 0.5 * (a - b) / k, 0.0, 1.0);
        return mix(b, a, h) - k * h * (1.0 - h);
      }
      // BACKGROUND AND FOREGROUND FRACTAL

      float fractal(vec3 p, float time) {
        p += cos(p.z * 3. + time * 4.) * .02;
        float depth = smoothstep(0., 6., -p.z + 5.);
        p *= .3;
        p = abs(2. - mod(p + vec3(0.4, 0.7, time * .07), 4.));
        float ls = 0.;
        float c = 0.;
        for (int i = 0; i < 6; i++) {
          p = abs(p) / min(dot(p, p), 1.) - .9;
          float l = length(p);
          c += abs(l - ls);
          ls = l;
        }
        return .15 + smoothstep(0., 50., c) * depth * 4.;
      }

      // RAY MARCHING AND SHADING

      vec3 march(vec3 from, vec3 dir, vec3 dir_light, float time) {
        vec3 odir = dir;
        vec3 p = from + dir * 2.;
        float fg = fractal(p + dir, time) * .55;
        vec3 col = vec3(0.);
        float totdist = 0.;
        float d;
        float v = 0.;

        float fade = smoothstep(maxdist * .2, maxdist * .9, maxdist - totdist);
        float ref = 1.;
        if (d < det * 2.) {
          p -= (det - d) * dir;
          col = mix(col_water * .15, col, fade);
        }
        col *= normalize(col_water + 1.5) * 1.7;
        p = maxdist * dir;
        vec3 bk = fractal(p, time) * ref * col_water;
        float glow = pow(max(0., dot(dir, -dir_light)), 1.5);
        vec3 glow_water = normalize(col_water+1.);
        bk += glow_water*(glow+ pow(glow, 8.) * 1.5) * ref;
        col += v * .06 * glow * ref * glow_water;
        col += bk + fg * col_water;
        return col;
      }

      void main(void)
      {
        //float time = mod(TimeOut, 600.);
        vec3 dir_light = normalize(vec3(-.3, 0.2, 1.));
        vec4 Color = Color0 * texture2D(Texture0, TexCoord0);

        if (StrengthOut>0.0f && (TypeOut==1f || ( Color.r <= 0.2f && Color.g <= 0.2f && Color.b <= 0.2f ))){

          float aspect = RenderDataOut.z/RenderDataOut.w;
          vec2 center = vec2(RenderDataOut.x / 2.0, RenderDataOut.y / 2.0);
          vec2 path = vec2(center.x - gl_FragCoord.x,center.y - gl_FragCoord.y) / 768.0;

          // Pixel coordinates
          vec2 uv = (vec2(path.x*1.0 , path.y*1.5)) * vec2(1.0,1.0);
          //vec2 uv = TexCoord0 / RenderDataOut.xy - .5;
          vec2 uv2 = uv;
          float ar = RenderDataOut.x / RenderDataOut.y;
          uv.x *= ar;

          float time = TimeOut/64.0;

          // Camera
          vec3 dir = normalize(vec3(uv, .9));
          vec3 from = vec3(1., 0., -0.5 + 0.0) * 1.25;

          // March and color
          vec3 col = march(from, dir, dir_light, time);
          col *= vec3(1.1, .9, .8) * 0.3;
          col += dot(uv2, uv2) * vec3(1., 0.6, 0.9) * .05;

          // Output to screen
          Color += vec4(col*StrengthOut, 1);
        }
        gl_FragColor = Color;
      }
    ]]></fragment>
  </shader>

</shaders>
